# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  name: String!
  userName: String!
  photo: String
  phone: String
  company: String
  email: String
  bio: String
  img: String
  joinDate: Date
  verifyType: VerifyType
  verifyName: String
  isCreator: Boolean
  links: [Link]
}

enum VerifyType {
  TWITTER
  INSTAGRAM
}

enum LinkType{
  WEBSITE
  DISCORD
  INSTAGRAM
  YOUTUBE
  FACEBOOK
  TIKTOK
}

type Link {
  type: LinkType!
  url: String!
}

scalar Date

type Item {
  id: ID!
  name: String!
  tag: String
  description: String
  uploadUrl: String!
  saleStatus: Int!
  price: ItemPrice
  creator: String!
  createDate: Date
}



type ItemPrice {
  type: Int!
  onsale: OnsaleType!
  initPrice: Float!
  startDate: Date
  expirationDate: Date

}

type Collection {
  id: ID!
  name: String!
  items: [Item]
  createDate: Date
  createor: String
}

enum walletType {
  BANK
  COIN
  WALLET
}

type wallet {
  type: walletType!
  pubToken: String!
}

type payment {
  itemId: Int!
  payType: Int!
  price: Float!
  payDate: Date
  
}

input Bid {
  itemId: Int!
  balance: Float!
  serviceFee: Float
  total: Float
}



enum SearchType {
  GAME
  VIDEO
  ANIMATION
  PHOTOGRPHY
  ALL
}

input PriceRange {
  max: Float!
  min: Float!
}

enum Blockchain {
  ETHEREUM
  MATIC
  KLAYTN
  SOLANA
  BNB
}



input SearchParm {
  param: String!
  type: SearchType
  price: PriceRange
  chain: Blockchain
  onsale: OnsaleType
  creator: String
}

enum OnsaleType {
  ETH
  WETH
  oxBTC
}

input uploadItem {
  name: String!
  tag: String
  description: String
  uploadUrl:  [String!]!
  creator: String!
  saleStatus: Int! 
  collection: String
}

input CollectionParm {
  name: String
  creator: String!
}

type Creator {
  userId: ID!
  name: String!
  description: String
  followers: [Int]
  followerNum: Int
}

input payParam {
  id: ID!
  onsaleType: OnsaleType!
  balance: Float!
  serviceFee: Float!
  payAmount: Float!
}

type Query {
  searchItems(param:SearchParm!): [Item]
  user(id:ID!): User
  item(id:ID!): Item
  collection(createor:String!):Collection
  items(createor:String,):[Item]
  createor(name:String):Creator
  featureCreator(type:Int!):[Creator]
}


type Mutation {
  placeBid(bid: Bid): String
  uploadArt(items:[uploadItem!]): [Item!]!
  mintArt(items:[uploadItem!]): [Item!]!
  createCollection(param: CollectionParm!): Collection
  checkout(param:payParam): String
}
