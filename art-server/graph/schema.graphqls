# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type User {
  id: ID!
  realname: String!
  username: String!
  password: String
  avatar: String
  phone: String
  company: String
  email: String
  bio: String
  img: String
  joinDate: Date
  verifyType: VerifyType
  verifyName: String
  isCreator: Boolean
  followerNum: Int
  followingNum: Int
  links: [Link]
}
input UpdateUser{
  realname: String!
  password: String
  avatar: String
  phone: String
  company: String
  email: String
  bio: String
  img: String
  verifyType: VerifyType
  verifyName: String
  links: String
}


# graph database
type Follow {
  id: ID!
  followerId: Int!
  followerName: String!
  followingId: Int!
  followingName: String!
  status: Boolean!
}

input FollowParam{
   followerId: Int!
  followerName: String!
  followingId: Int!
  followingName: String!
  status: Boolean! 
}

input NewUser {
    username: String!
    password: String!
    email: String 
    phone: String
}

enum VerifyType {
  TWITTER
  INSTAGRAM
}

enum LinkType{
  WEBSITE
  DISCORD
  INSTAGRAM
  YOUTUBE
  FACEBOOK
  TIKTOK
}

type Link {
  type: LinkType!
  url: String!
}

scalar Date

type Item {
  id: ID!
  name: String!
  tag: String
  description: String
  uploadUrl: String!
  saleStatus: Int!
  price: ItemPrice
  creatorId: ID!
  creator: String!
  createDate: Date
  collectionId: Int
}

enum ItemPriceType {
  FIXED
  AUCTION
}


type ItemPrice {
  itemId: ID!
  itemPriceType: ItemPriceType!
  onsaleType: OnsaleType!
  initPrice: Float!
  serviceFee: Float!
  startDate: Date
  expirationDate: Date

}

input PriceParam {
  itemId: ID!
  itemPriceType: ItemPriceType!
  onsaleType: OnsaleType!
  initPrice: Float!
  startDate: Date
  expirationDate: Date

}

type Collection {
  id: ID!
  name: String!
  items: [Item]
  createDate: Date
  createor: String
}

enum walletType {
  BANK
  COIN
  WALLET
}

type wallet {
  type: walletType!
  pubToken: String!
}

input PayParam {
  itemId: ID!
  onsaleType: OnsaleType!
  balance: Float!
  serviceFee: Float!
  payAmount: Float!
}

type Payment {
  id: ID!
  itemId: Int!
  onsaleType: OnsaleType!
  price: Float!
  serviceFee: Float!
  createor: String!
  createDate: Date
  payStatus: Int!
  payUser: String
  payDate: Date
  
}

input BidParm {
  itemId: Int!
  total: Float!
}

type Bid{
  id: ID!
  itemId: Int!
  serviceFee: Float!
  total: Float !
  userId: ID!
  username: String!
  bidDate: Date!
  itemPriceType: ItemPriceType!
  onsaleType: OnsaleType!
  bidEndDate: Date
}


enum SearchType {
  GAME
  VIDEO
  ANIMATION
  PHOTOGRPHY
  ALL
}

input PriceRange {
  max: Float!
  min: Float!
}

enum Blockchain {
  ETHEREUM
  MATIC
  KLAYTN
  SOLANA
  BNB
}



input SearchParm {
  param: String!
  type: SearchType
  price: PriceRange
  chain: Blockchain
  onsale: OnsaleType
  creator: String
}

enum OnsaleType {
  ETH
  WETH
  oxBTC
}


input uploadItem {
  name: String!
  tag: String
  description: String
  uploadUrl:  String!
  createId: ID!
  creator: String!
  saleStatus: Int! 
  collection: String
}

input CollectionParm {
  name: String
  creator: String!
}


type SubscriptionEvent {
  payments: [Payment]
  bids: [Bid]
}

input Login {
    username: String!
    password: String!
}

input RefreshTokenInput{
    token: String!
}

type SearchResult {
  people: [User]!
  items: [Item]!
}

type Query {
  searchItems(param:SearchParm!): [Item]
  search(param:String): SearchResult 
  user(id:ID!): User
  item(id:ID!): Item
  collection(creator:String!):[Collection]
  items(createor:String!):[Item]
}


type Mutation {
  newUser(user:NewUser): String!
  updateUser(user:UpdateUser):String!
  login(input: Login!): String!
  refreshToken(input: RefreshTokenInput!): String!
  placeBid(bid: BidParm): Boolean! 
  uploadArt(items:[uploadItem!]): [Item!]!
  setPriceAndMint(param:PriceParam): Boolean!
  createCollection(param: CollectionParm!): Boolean! 
  checkout(param:PayParam): String
  connectWallet(userId:ID!,type:walletType!):wallet!
  follow(param:FollowParam): String
}


type Subscription {
  subscriptionPayment(itemid: String) : SubscriptionEvent
  
}
